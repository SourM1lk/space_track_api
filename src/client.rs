//! Authenticated Space-Track API client.

use crate::{error::Error, query::QueryBuilder};
use ureq::{Agent, AgentBuilder};

/// Base URL for every Space-Track request.
pub const BASE_URL: &str = "https://www.space-track.org";

/// Logged-in Space-Track session.
#[derive(Debug)]
pub struct SpaceTrackClient {
    /// Re-usable HTTP agent with its own cookie jar.
    pub(crate) agent: Agent,
}

impl SpaceTrackClient {
    // ------------------------------------------------------------------------
    // Session lifecycle
    // ------------------------------------------------------------------------

    /// Log in with `username` / `password`.  
    /// Returns an authenticated [`SpaceTrackClient`].
    pub fn login(username: &str, password: &str) -> Result<Self, Error> {
        // `ureq` automatically allocates a SharedCookieJar when the
        let agent = AgentBuilder::new().build();

        let resp = agent
            .post(&format!("{BASE_URL}/ajaxauth/login"))
            .send_form(&[("identity", username), ("password", password)])?;

        if resp.status() != 200 {
            return Err(Error::Http(resp.status()));
        }

        // Successful login → body == "\"\"".
        // Failed login → {"Login":"Failed", ...}
        if let Ok(val) = resp.into_json::<serde_json::Value>() {
            if val.get("Login").is_some() {
                return Err(Error::Auth);
            }
        }

        Ok(Self { agent })
    }

    /// Explicitly log out (optional, cookies expire after ~2 hours).
    pub fn logout(&self) -> Result<(), Error> {
        let resp = self
            .agent
            .get(&format!("{BASE_URL}/ajaxauth/logout"))
            .call()?;

        if resp.status() == 200 {
            Ok(())
        } else {
            Err(Error::Http(resp.status()))
        }
    }

    // ------------------------------------------------------------------------
    // Internal helper
    // ------------------------------------------------------------------------

    pub(crate) fn query_builder<'a, T>(
        &'a self,
        controller: &'static str,
        class: &'static str,
    ) -> QueryBuilder<'a, T> {
        QueryBuilder::new(self, controller, class)
    }
}

// ------------------------------------------------------------------------
// Per-class convenience methods
// (generated by build.rs into $OUT_DIR/class_fns.rs)
// ------------------------------------------------------------------------
include!(concat!(env!("OUT_DIR"), "/class_fns.rs"));
